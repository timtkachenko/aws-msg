// Code generated by MockGen. DO NOT EDIT.
// Source: ./subscriber.go

// Package mocks is a generated GoMock package.
package mocks

import (
	chassis "aws-msg/chassis"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMediator is a mock of Mediator interface.
type MockMediator struct {
	ctrl     *gomock.Controller
	recorder *MockMediatorMockRecorder
}

// MockMediatorMockRecorder is the mock recorder for MockMediator.
type MockMediatorMockRecorder struct {
	mock *MockMediator
}

// NewMockMediator creates a new mock instance.
func NewMockMediator(ctrl *gomock.Controller) *MockMediator {
	mock := &MockMediator{ctrl: ctrl}
	mock.recorder = &MockMediatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediator) EXPECT() *MockMediatorMockRecorder {
	return m.recorder
}

// GetWaitTimeSeconds mocks base method.
func (m *MockMediator) GetWaitTimeSeconds() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWaitTimeSeconds")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetWaitTimeSeconds indicates an expected call of GetWaitTimeSeconds.
func (mr *MockMediatorMockRecorder) GetWaitTimeSeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWaitTimeSeconds", reflect.TypeOf((*MockMediator)(nil).GetWaitTimeSeconds))
}

// Receive mocks base method.
func (m *MockMediator) Receive(settings chassis.SubscriptionContext) ([]*chassis.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", settings)
	ret0, _ := ret[0].([]*chassis.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockMediatorMockRecorder) Receive(settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockMediator)(nil).Receive), settings)
}

// MockMessageHandler is a mock of MessageHandler interface.
type MockMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerMockRecorder
}

// MockMessageHandlerMockRecorder is the mock recorder for MockMessageHandler.
type MockMessageHandlerMockRecorder struct {
	mock *MockMessageHandler
}

// NewMockMessageHandler creates a new mock instance.
func NewMockMessageHandler(ctrl *gomock.Controller) *MockMessageHandler {
	mock := &MockMessageHandler{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandler) EXPECT() *MockMessageHandlerMockRecorder {
	return m.recorder
}

// GetSubscriptionContext mocks base method.
func (m *MockMessageHandler) GetSubscriptionContext() chassis.SubscriptionContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionContext")
	ret0, _ := ret[0].(chassis.SubscriptionContext)
	return ret0
}

// GetSubscriptionContext indicates an expected call of GetSubscriptionContext.
func (mr *MockMessageHandlerMockRecorder) GetSubscriptionContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionContext", reflect.TypeOf((*MockMessageHandler)(nil).GetSubscriptionContext))
}

// Handle mocks base method.
func (m *MockMessageHandler) Handle(message *chassis.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockMessageHandlerMockRecorder) Handle(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockMessageHandler)(nil).Handle), message)
}
